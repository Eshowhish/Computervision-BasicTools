# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ui2.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import numpy as np
import cv2

from PyQt5 import QtCore, QtGui, QtWidgets

Oba_Image_path='Dataset_opencvdl/Q1_Image/Uncle_Roger.jpg'
Flower_Image_path='Dataset_opencvdl/Q1_Image/Flower.jpg'
Cat_Image_path='Dataset_opencvdl/Q2_Image/Cat.png'
Chihiro_Image_path='Dataset_opencvdl/Q3_Image/Chihiro.jpg'
Parrot_Image_path='Dataset_opencvdl/Q4_Image/Parrot.png'

class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1105, 564)
        self.groupBox = QtWidgets.QGroupBox(Form)
        self.groupBox.setGeometry(QtCore.QRect(20, 30, 211, 481))
        self.groupBox.setObjectName("groupBox")
        self.pushButton = QtWidgets.QPushButton(self.groupBox)
        self.pushButton.setGeometry(QtCore.QRect(30, 70, 151, 31))
        self.pushButton.setObjectName("pushButton")

    # 1.1 load_image
        self.pushButton.clicked.connect(Load_Image)     
        self.pushButton_2 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_2.setGeometry(QtCore.QRect(30, 180, 151, 31))
        self.pushButton_2.setObjectName("pushButton_2")

    #1.2 Color_Seperation
        self.pushButton_2.clicked.connect(Color_Seperation)

        self.pushButton_3 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_3.setGeometry(QtCore.QRect(30, 290, 151, 31))
        self.pushButton_3.setObjectName("pushButton_3")

    #1.3 Image_Flipping
        self.pushButton_3.clicked.connect(Image_Flipping)

        self.pushButton_4 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_4.setGeometry(QtCore.QRect(30, 390, 151, 31))
        self.pushButton_4.setObjectName("pushButton_4")

    #1.4 Blending
        self.pushButton_4.clicked.connect(Blending)        

        self.groupBox_2 = QtWidgets.QGroupBox(Form)
        self.groupBox_2.setGeometry(QtCore.QRect(270, 30, 211, 481))
        self.groupBox_2.setObjectName("groupBox_2")
        self.pushButton_9 = QtWidgets.QPushButton(self.groupBox_2)
        self.pushButton_9.setGeometry(QtCore.QRect(30, 120, 151, 31))
        self.pushButton_9.setObjectName("pushButton_9")
    # 2.1 Median_Filter
        self.pushButton_9.clicked.connect(Median_Filter)

        self.pushButton_10 = QtWidgets.QPushButton(self.groupBox_2)
        self.pushButton_10.setGeometry(QtCore.QRect(30, 240, 151, 31))
        self.pushButton_10.setObjectName("pushButton_10")

    # 2.2 Gussian_Blur
        self.pushButton_10.clicked.connect(Gaussian_Blur)

        self.pushButton_11 = QtWidgets.QPushButton(self.groupBox_2)
        self.pushButton_11.setGeometry(QtCore.QRect(30, 350, 151, 31))
        self.pushButton_11.setObjectName("pushButton_11")

    # 2.3 BIlateral_Filter
        self.pushButton_11.clicked.connect(Bilateral_Filter)

        self.groupBox_3 = QtWidgets.QGroupBox(Form)
        self.groupBox_3.setGeometry(QtCore.QRect(520, 30, 211, 481))
        self.groupBox_3.setObjectName("groupBox_3")
        self.pushButton_5 = QtWidgets.QPushButton(self.groupBox_3)
        self.pushButton_5.setGeometry(QtCore.QRect(30, 180, 151, 31))
        self.pushButton_5.setObjectName("pushButton_5")

    # 3.2 Sobel_X
        self.pushButton_5.clicked.connect(Sobel_X)

        self.pushButton_6 = QtWidgets.QPushButton(self.groupBox_3)
        self.pushButton_6.setGeometry(QtCore.QRect(30, 290, 151, 31))
        self.pushButton_6.setObjectName("pushButton_6")

     # 3.3 Sobel_Y
        self.pushButton_6.clicked.connect(Sobel_Y)

        self.pushButton_7 = QtWidgets.QPushButton(self.groupBox_3)
        self.pushButton_7.setGeometry(QtCore.QRect(30, 70, 151, 31))
        self.pushButton_7.setObjectName("pushButton_7")

    # 3.1 Gussian_Blur_Gray
        self.pushButton_7.clicked.connect(Gussian_Blur_Gray)

        self.pushButton_8 = QtWidgets.QPushButton(self.groupBox_3)
        self.pushButton_8.setGeometry(QtCore.QRect(30, 390, 151, 31))
        self.pushButton_8.setObjectName("pushButton_8")

    # 3.4 Magnitude
        self.pushButton_8.clicked.connect(Magnitude)


        self.groupBox_4 = QtWidgets.QGroupBox(Form)
        self.groupBox_4.setGeometry(QtCore.QRect(770, 30, 291, 481))
        self.groupBox_4.setObjectName("groupBox_4")
        self.textEdit = QtWidgets.QTextEdit(self.groupBox_4)
        self.textEdit.setGeometry(QtCore.QRect(90, 90, 151, 31))
        self.textEdit.setObjectName("textEdit")
        self.label = QtWidgets.QLabel(self.groupBox_4)
        self.label.setGeometry(QtCore.QRect(20, 90, 61, 31))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.groupBox_4)
        self.label_2.setGeometry(QtCore.QRect(250, 90, 31, 31))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.groupBox_4)
        self.label_3.setGeometry(QtCore.QRect(20, 180, 61, 31))
        self.label_3.setObjectName("label_3")
        self.textEdit_2 = QtWidgets.QTextEdit(self.groupBox_4)
        self.textEdit_2.setGeometry(QtCore.QRect(90, 180, 151, 31))
        self.textEdit_2.setObjectName("textEdit_2")
        self.textEdit_3 = QtWidgets.QTextEdit(self.groupBox_4)
        self.textEdit_3.setGeometry(QtCore.QRect(90, 260, 151, 31))
        self.textEdit_3.setObjectName("textEdit_3")
        self.textEdit_4 = QtWidgets.QTextEdit(self.groupBox_4)
        self.textEdit_4.setGeometry(QtCore.QRect(90, 330, 151, 31))
        self.textEdit_4.setObjectName("textEdit_4")
        self.label_4 = QtWidgets.QLabel(self.groupBox_4)
        self.label_4.setGeometry(QtCore.QRect(20, 260, 61, 31))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.groupBox_4)
        self.label_5.setGeometry(QtCore.QRect(20, 330, 61, 31))
        self.label_5.setObjectName("label_5")
        self.pushButton_12 = QtWidgets.QPushButton(self.groupBox_4)
        self.pushButton_12.setGeometry(QtCore.QRect(50, 400, 191, 28))
        self.pushButton_12.setObjectName("pushButton_12")

    #4.1 Transform
        self.pushButton_12.clicked.connect(self.Transforms)

        self.label_6 = QtWidgets.QLabel(self.groupBox_4)
        self.label_6.setGeometry(QtCore.QRect(250, 260, 31, 31))
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.groupBox_4)
        self.label_7.setGeometry(QtCore.QRect(250, 330, 31, 31))
        self.label_7.setObjectName("label_7")

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.groupBox.setTitle(_translate("Form", "1. Image Processing"))
        self.pushButton.setText(_translate("Form", "1.1 Load Image"))
        self.pushButton_2.setText(_translate("Form", "1.2 Color seperation"))
        self.pushButton_3.setText(_translate("Form", "1.3 Image Flipping"))
        self.pushButton_4.setText(_translate("Form", "1.4 Blending"))
        self.groupBox_2.setTitle(_translate("Form", "2. Image smoothing"))
        self.pushButton_9.setText(_translate("Form", "2.1 Median Fliter"))
        self.pushButton_10.setText(_translate("Form", "2.2 Gaussian Blur"))
        self.pushButton_11.setText(_translate("Form", "2.3 Bilinearal Fliter"))
        self.groupBox_3.setTitle(_translate("Form", "3. Edge Detection"))
        self.pushButton_5.setText(_translate("Form", "3.2 Sobel X"))
        self.pushButton_6.setText(_translate("Form", "3.3 Sobel Y"))
        self.pushButton_7.setText(_translate("Form", "3.1 Gaussian Blur"))
        self.pushButton_8.setText(_translate("Form", "3.4 Magnitude"))
        self.groupBox_4.setTitle(_translate("Form", "4. Transformation"))
        self.label.setText(_translate("Form", "Rotation : "))
        self.label_2.setText(_translate("Form", "deg"))
        self.label_3.setText(_translate("Form", "Scaling : "))
        self.label_4.setText(_translate("Form", "Tx : "))
        self.label_5.setText(_translate("Form", "Ty : "))
        self.pushButton_12.setText(_translate("Form", "4. transformation"))
        self.label_6.setText(_translate("Form", "pixel"))
        self.label_7.setText(_translate("Form", "pixel"))

        #4.1
    def Transforms(self):
        img=cv2.imread(Parrot_Image_path)
        rotated_angle=int(self.textEdit.toPlainText())
        scale_value=float(self.textEdit_2.toPlainText())
        Tx=int(self.textEdit_3.toPlainText())
        Ty=int(self.textEdit_4.toPlainText())

        #scale
        res=cv2.resize(img,None,fx=scale_value,fy=scale_value)

        #shift
        shift_matrix=np.float32([[1,0,Tx],[0,1,Ty]])
        res=cv2.warpAffine(res,shift_matrix,(img.shape[1],img.shape[0]))

        #rotate
        rotated_matrix=cv2.getRotationMatrix2D((160,84),rotated_angle,1)
        res=cv2.warpAffine(res,rotated_matrix,(img.shape[1],img.shape[0]))
    

        cv2.imshow('Original',img)
        cv2.imshow('Transform',res)

#1.1
def Load_Image():
    img=cv2.imread(Oba_Image_path)
    cv2.imshow('My Image',img)
    print('Height = ',img.shape[0])
    print('Width = ',img.shape[1])
    cv2.waitKey(0)

#1.2
def Color_Seperation():
    img=cv2.imread(Flower_Image_path)
    R,G,B=cv2.split(img)
    zeros = np.zeros(img.shape[:2],dtype="uint8")
    cv2.imshow('Red',cv2.merge([R,zeros,zeros]))
    cv2.imshow('Green',cv2.merge([zeros,G,zeros]))
    cv2.imshow('Blue',cv2.merge([zeros,zeros,B]))
    cv2.waitKey(0)

#1.3
def Image_Flipping():
    img=cv2.imread(Oba_Image_path)
    img_flip=cv2.flip(img,1)
    cv2.imshow('Original Image',img)
    cv2.imshow('Result',img_flip)
    cv2.waitKey(0)

#1.4
def Blending():
    def no_function(self):
        pass
    img=cv2.imread(Oba_Image_path)
    img_flip=cv2.flip(img,1)
    out_put=cv2.addWeighted(img,0.5,img_flip,0.5,0)
    winname='Blending'
    cv2.namedWindow(winname)
    cv2.createTrackbar('BLEND', winname, 0, 255, no_function)
    while(True):
        cv2.imshow(winname,out_put)
        
        if(cv2.waitKey(1)==27):
            break
        alpha=cv2.getTrackbarPos('BLEND',winname) / 255
        beta=1-alpha
        out_put=cv2.addWeighted(img, alpha, img_flip, beta, 0)
        # print(alpha,beta)
    cv2.destroyAllWindows()

#2.1
def Median_Filter():
    img=cv2.imread(Cat_Image_path)
    img_dst=cv2.medianBlur(img,7)
    cv2.imshow('Original',img)
    cv2.imshow('Median_Filter',img_dst)

#2.2
def Gaussian_Blur():
    img=cv2.imread(Cat_Image_path)
    img_dst = cv2.GaussianBlur(img,(3,3),0)
    cv2.imshow('Original',img)
    cv2.imshow('Gaussian_Blur',img_dst)

#2.3
def Bilateral_Filter():
    img=cv2.imread(Cat_Image_path)
    img_dst = cv2.bilateralFilter(img,9,90,90)
    cv2.imshow('Original',img)
    cv2.imshow('Bilateral_Filter',img_dst)

#3.1

def Gussian_Blur_Gray():
    img=cv2.imread(Chihiro_Image_path,0)
    img_dst=Gussian_Blur_Gray_function(img)
    cv2.imshow('Original_Gray',img)
    cv2.imshow('Gaussian_Blur_Gray',img_dst)

def Gussian_Blur_Gray_function(image):
    #ppt上的三個步驟實作
    x, y = np.mgrid[-1:2, -1:2] #生成中心點為(0,0)的初始Gussian_Filter
    gaussian_kernel = np.exp(-(x**2+y**2)) #計算高斯方程的exp部分就好,不須除以2pi,因為後面會normalize掉
    gaussian_kernel = gaussian_kernel / gaussian_kernel.sum() #normalize

    img_dst=cv2.filter2D(image,-1,gaussian_kernel)
    #img_dst=convolve2D(img,gaussian_kernel)  
    return img_dst

#3.2
def Sobel_X():
    img=cv2.imread(Chihiro_Image_path,0)
    img_guassian=Gussian_Blur_Gray_function(img)

    #垂直邊緣檢測矩陣
    kh = np.array([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]], dtype = np.float)
    img_dst=cv2.filter2D(img_guassian,-1,kh)
    # img_dst=convolve2D(img_guassian,kh)
    cv2.imshow('Sobel_X',img_dst)

#3.3
def Sobel_Y():
    img=cv2.imread(Chihiro_Image_path,0)
    img_guassian=Gussian_Blur_Gray_function(img)
    #垂直邊緣檢測矩陣
    kv = np.array([[-1, -2, -1], [0, 0, 0], [1, 2, 1]], dtype = np.float)
    img_dst=cv2.filter2D(img_guassian,-1,kv)
    # img_dst=convolve2D(img_guassian,kh)
    cv2.imshow('Sobel_Y',img_dst)

#3.4
def Magnitude():
    img=cv2.imread(Chihiro_Image_path,0)
    img_guassian=Gussian_Blur_Gray_function(img)
    kh = np.array([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]], dtype = np.float)
    kv = np.array([[-1, -2, -1], [0, 0, 0], [1, 2, 1]], dtype = np.float)
    img_dst_x=cv2.filter2D(img_guassian,-1,kh)
    img_dst_y=cv2.filter2D(img_guassian,-1,kv)
    img_dst=cv2.addWeighted(img_dst_x,0.5,img_dst_y,0.5,0)
    cv2.imshow('Magnitude',img_dst)





def convolve2D(image, kernel, padding=0, strides=1):
    # 將kernel先進行翻轉
    kernel = np.flipud(np.fliplr(kernel))

    # 取得kernel及圖片的大小
    xKernShape = kernel.shape[0]
    yKernShape = kernel.shape[1]
    xImgShape = image.shape[0]
    yImgShape = image.shape[0]

    # 設定convolve後的大小
    xOutput = int(((xImgShape - xKernShape + 2 * padding) / strides) + 1)
    yOutput = int(((yImgShape - yKernShape + 2 * padding) / strides) + 1)
    output = np.zeros((xOutput, yOutput))

    # 若padding不等於0 將超出邊界的部分補0
    if padding != 0:
        imagePadded = np.zeros((image.shape[0] + padding*2, image.shape[1] + padding*2))
        imagePadded[int(padding):int(-1 * padding), int(padding):int(-1 * padding)] = image
        print(imagePadded)
    else:
        imagePadded = image

    # 實作convolve
    for y in range(image.shape[1]):
        # convolve到最後一行，跳出結束
        if y > image.shape[1] - yKernShape:
            break
        # stride大於1的情況 y軸
        if y % strides == 0:
            for x in range(image.shape[0]):
                # 換行convolve
                if x > image.shape[0] - xKernShape:
                    break
                try:
                    # stride大於1的情況 x軸
                    if x % strides == 0:
                        output[x, y] = (kernel * imagePadded[x: x + xKernShape, y: y + yKernShape]).sum()
                except:
                    break

    return output


if __name__ == "__main__":
   import sys
   app = QtWidgets.QApplication(sys.argv)
   MainWindow = QtWidgets.QMainWindow()
   ui = Ui_Form()
   ui.setupUi(MainWindow)
   MainWindow.show()
   sys.exit(app.exec_())